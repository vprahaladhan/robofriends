{"version":3,"sources":["components/Robot.js","components/ErrorBoundary.js","components/RobotsList.js","containers/App.js","actions.js","reducers/robotsReducer.js","reducers/searchTextReducer.js","index.js"],"names":["Card","robot","className","src","id","alt","username","name","email","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","RobotsList","robots","searchText","length","filter","toLowerCase","includes","map","Robot","key","mapDispatchToProps","setSearchText","type","data","fetchRobots","dispatch","a","async","axios","get","connect","searchRobots","useEffect","value","placeholder","onChange","target","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","document","getElementById"],"mappings":"wQAYeA,G,YAVF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAAMG,IAAMC,IAAKJ,EAAMK,WACzD,4BAAKL,EAAMM,MACX,2BAAIN,EAAMO,U,wCCkBDC,E,YAtBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,M,+BAKZ,OACE,kBAAC,WAAD,KACGG,KAAKH,SAAW,uDAAmCG,KAAKL,MAAMO,c,GAjB3CC,aCoBbC,EAlBI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAC5B,OACE,yBAAKnB,UAAU,aACb,kBAAC,EAAD,KACqB,IAAlBkB,EAAOE,OACNF,EACGG,QAAO,SAAAtB,GAAK,OACXA,EAAMM,KAAKiB,cAAcC,SAASJ,EAAWG,kBAE9CE,KAAI,SAAAzB,GAAK,OAAI,kBAAC0B,EAAD,CAAOC,IAAK3B,EAAMG,GAAIH,MAAOA,OAE7C,6C,kCCmBV,IAKM4B,EAAqB,CACzBC,cCjC2B,SAAAT,GAAU,MAAK,CAC1CU,KAAM,qBACNC,KAAMX,IDgCNY,YC7ByB,kBAC1B,SAAOC,GAAP,SAAAC,EAAAC,OAAA,4DACCF,EADD,WAAAC,EAAA,MAGgBE,IAAMC,IAAI,+CAH1B,mBAGyEN,KAHzE,MAEGD,KAAM,sBACNC,KAHH,6DD+BcO,eAVS,SAAA5B,GAAK,MAAK,CAChCU,WAAYV,EAAM6B,aAAanB,WAC/BD,OAAQT,EAAMsB,YAAYb,UAQYS,EAAzBU,EApCf,YAAkE,IAAnDlB,EAAkD,EAAlDA,WAAYD,EAAsC,EAAtCA,OAAQU,EAA8B,EAA9BA,cAAeG,EAAe,EAAfA,YAMhD,OAJAQ,qBAAU,WACRR,MACC,IAGD,yBAAK/B,UAAU,UACb,wBAAIA,UAAU,MAAd,eAEA,2BACEA,UAAU,mCACV6B,KAAK,SACLW,MAAOrB,EACPsB,YAAY,gBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAAce,EAAOH,UAGjD,kBAAC,EAAD,CACEtB,OAAQA,EACRC,WAAYA,Q,OE5BdyB,EAAe,CACnB1B,OAAQ,ICDJ0B,EAAe,CACnBzB,WAAY,ICYR0B,EAAcC,YAAgB,CAClCR,aDV+B,WAAwC,IAAvC7B,EAAsC,uDAA9BmC,EAAcG,EAAgB,uDAAP,GAC/D,OAAQA,EAAOlB,MACb,IAAK,qBACH,OAAO,eAAIpB,EAAX,CAAkBU,WAAY4B,EAAOjB,OACvC,QACE,OAAOrB,ICMXsB,YFX2B,WAAwC,IAAvCtB,EAAsC,uDAA9BmC,EAAcG,EAAgB,uDAAP,GAC3D,OAAQA,EAAOlB,MACb,IAAK,sBACH,OAAO,eAAIpB,EAAX,CAAkBS,OAAQ6B,EAAOjB,OACnC,QACE,OAAOrB,MESPuC,EAAQC,YACZJ,EACAK,YAAgBC,IAAiBC,2BAGnCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,MADF,KAGAO,SAASC,eAAe,W","file":"static/js/main.86db7b37.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ robot }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${robot.id}`} alt={robot.username} />\r\n      <h2>{robot.name}</h2>\r\n      <p>{robot.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.hasError ? <h1>Oops..That is not good!</h1> : this.props.children}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport Robot from \"../components/Robot\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nconst RobotsList = ({ robots, searchText }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <ErrorBoundary>\r\n        {robots.length !== 0 ? (\r\n          robots\r\n            .filter(robot =>\r\n              robot.name.toLowerCase().includes(searchText.toLowerCase())\r\n            )\r\n            .map(robot => <Robot key={robot.id} robot={robot} />)\r\n        ) : (\r\n          <h1>Loading...</h1>\r\n        )}\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RobotsList;\r\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { useEffect } from \"react\";\n\nimport \"../styles/App.css\";\nimport RobotsList from \"../components/RobotsList\";\nimport { setSearchText, fetchRobots } from \"../actions\";\n\nfunction App({ searchText, robots, setSearchText, fetchRobots }) {\n\n  useEffect(() => {\n    fetchRobots()\n  }, []);\n\n  return (\n    <div className=\"App tc\">\n      <h1 className='f1'>RoboFriends</h1>\n\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        value={searchText}\n        placeholder=\"search robots\"\n        onChange={({ target }) => setSearchText(target.value)}\n      />\n\n      <RobotsList\n        robots={robots}\n        searchText={searchText}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  searchText: state.searchRobots.searchText,\n  robots: state.fetchRobots.robots\n})\n\nconst mapDispatchToProps = {\n  setSearchText,\n  fetchRobots\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from \"axios\";\r\n\r\n// const getRobots = async () => {\r\n//   const { data } = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n//   return data\r\n// }\r\n\r\nexport const setSearchText = searchText => ({\r\n  type: \"CHANGE_SEARCH_TEXT\",\r\n  data: searchText\r\n});\r\n\r\nexport const fetchRobots = () =>\r\n async (dispatch) => {\r\n  dispatch({\r\n    type: \"FETCH_REMOTE_ROBOTS\",\r\n    data: (await axios.get(\"https://jsonplaceholder.typicode.com/users\")).data\r\n  })\r\n };\r\n","const initialState = {\r\n  robots: []\r\n};\r\n\r\nexport const robotsReducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case \"FETCH_REMOTE_ROBOTS\":\r\n      return {...state, robots: action.data};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  searchText: \"\"\r\n};\r\n\r\nexport const searchTextReducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_SEARCH_TEXT\":\r\n      return {...state, searchText: action.data};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import \"tachyons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport \"./styles/index.css\";\nimport App from \"./containers/App\";\nimport { robotsReducer } from \"./reducers/robotsReducer\";\nimport { searchTextReducer } from \"./reducers/searchTextReducer\";\n\nconst rootReducer = combineReducers({\n  searchRobots: searchTextReducer,\n  fetchRobots: robotsReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, createLogger())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// renderApp()\n// store.subscribe(renderApp)\n"],"sourceRoot":""}