{"version":3,"sources":["components/Robot.js","components/ErrorBoundary.js","components/RobotsList.js","containers/App.js","actions.js","reducers/robotsReducer.js","reducers/searchTextReducer.js","registerServiceWorker.js","index.js"],"names":["Card","robot","className","src","id","alt","username","name","email","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","RobotsList","robots","searchText","length","filter","toLowerCase","includes","map","Robot","key","mapDispatchToProps","setSearchText","type","data","fetchRobots","dispatch","a","async","axios","get","connect","searchRobots","useEffect","value","placeholder","onChange","target","initialState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8a8f5971.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ robot }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${robot.id}`} alt={robot.username} />\r\n      <h2>{robot.name}</h2>\r\n      <p>{robot.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.hasError ? <h1>Oops..That is not good!</h1> : this.props.children}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport Robot from \"../components/Robot\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nconst RobotsList = ({ robots, searchText }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <ErrorBoundary>\r\n        {robots.length !== 0 ? (\r\n          robots\r\n            .filter(robot =>\r\n              robot.name.toLowerCase().includes(searchText.toLowerCase())\r\n            )\r\n            .map(robot => <Robot key={robot.id} robot={robot} />)\r\n        ) : (\r\n          <h1>Loading...</h1>\r\n        )}\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RobotsList;\r\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { useEffect } from \"react\";\n\nimport \"../styles/App.css\";\nimport RobotsList from \"../components/RobotsList\";\nimport { setSearchText, fetchRobots } from \"../actions\";\n\nfunction App({ searchText, robots, setSearchText, fetchRobots }) {\n\n  useEffect(() => {\n    fetchRobots()\n  }, []);\n\n  return (\n    <div className=\"App tc\">\n      <h1 className='f1'>RoboFriends</h1>\n\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        value={searchText}\n        placeholder=\"search robots\"\n        onChange={({ target }) => setSearchText(target.value)}\n      />\n\n      <RobotsList\n        robots={robots}\n        searchText={searchText}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  searchText: state.searchRobots.searchText,\n  robots: state.fetchRobots.robots\n})\n\nconst mapDispatchToProps = {\n  setSearchText,\n  fetchRobots\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from \"axios\";\r\n\r\n// const getRobots = async () => {\r\n//   const { data } = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n//   return data\r\n// }\r\n\r\nexport const setSearchText = searchText => ({\r\n  type: \"CHANGE_SEARCH_TEXT\",\r\n  data: searchText\r\n});\r\n\r\nexport const fetchRobots = () =>\r\n async (dispatch) => {\r\n  dispatch({\r\n    type: \"FETCH_REMOTE_ROBOTS\",\r\n    data: (await axios.get(\"https://jsonplaceholder.typicode.com/users\")).data\r\n  })\r\n };\r\n","const initialState = {\r\n  robots: []\r\n};\r\n\r\nexport const robotsReducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case \"FETCH_REMOTE_ROBOTS\":\r\n      return {...state, robots: action.data};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  searchText: \"\"\r\n};\r\n\r\nexport const searchTextReducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_SEARCH_TEXT\":\r\n      return {...state, searchText: action.data};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"tachyons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport \"./styles/index.css\";\nimport App from \"./containers/App\";\nimport { robotsReducer } from \"./reducers/robotsReducer\";\nimport { searchTextReducer } from \"./reducers/searchTextReducer\";\nimport registerServiceWorker from './registerServiceWorker';\n\nconst rootReducer = combineReducers({\n  searchRobots: searchTextReducer,\n  fetchRobots: robotsReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, createLogger())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// renderApp()\n// store.subscribe(renderApp)\n\nregisterServiceWorker();"],"sourceRoot":""}